pipeline {
  agent any

  options {
    timestamps()
    disableConcurrentBuilds()
  }

  parameters {
    string(
      name: 'IMAGE_REPO',
      defaultValue: 'local',
      description: 'Docker repository namespace (e.g. your Docker Hub username)'
    )
    booleanParam(
      name: 'RUN_SMOKE',
      defaultValue: true,
      description: 'Run the smoke test'
    )
  }

  environment {
    SERVICE_DIR = 'services/flask-api'
  }

  stages {

    stage('Checkout') {
      steps {
        checkout scm
        script {
          def versionFile = "${env.SERVICE_DIR}/VERSION"
          if (!fileExists(versionFile)) {
            def auto = "0.0.${env.BUILD_NUMBER}"
            writeFile file: versionFile, text: "${auto}\n"
            echo "VERSION was missing. Created temporary version: ${auto}"
          }
          env.APP_VERSION = readFile(versionFile).trim()
          env.GIT_SHORT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
          echo "APP_VERSION=${env.APP_VERSION}, GIT_SHORT=${env.GIT_SHORT}"
        }
        sh 'ls -1 ${SERVICE_DIR} | head -50'
      }
    }

    stage('Python Build & Tests') {
      steps {
        script {
          docker.image('python:3.12-slim').inside('-u root:root') {
            dir(env.SERVICE_DIR) {
              sh '''
                set -eux
        	export PYTHONPATH=$(pwd):${PYTHONPATH:-}
                python --version
                if [ -f requirements.txt ]; then pip install --no-cache-dir -r requirements.txt; fi
                if ls tests/*.py >/dev/null 2>&1; then
                  pip install --no-cache-dir pytest
                  pytest -q
                else
                  echo "No tests found."
                fi
              '''
            }
          }
        }
      }
    }

stage('Build Image') {
  steps {
    dir(env.SERVICE_DIR) {
      sh '''
        set -euo pipefail
        echo "Using IMAGE_REPO='${IMAGE_REPO}' APP_VERSION='${APP_VERSION}'"
        # Pass IMAGE_REPO into make (VERSION read from VERSION file)
        make ci-build IMAGE_REPO="${IMAGE_REPO}"
      '''
    }
  }
}

stage('Smoke Test') {
  when { expression { return params.RUN_SMOKE } }
  steps {
    dir(env.SERVICE_DIR) {
      sh '''
        set -euo pipefail
        echo "Smoke test for IMAGE_REPO='${IMAGE_REPO}'"
        make ci-smoke IMAGE_REPO="${IMAGE_REPO}"
      '''
    }
  }
}

    stage('(Optional) Tag Commit Variant') {
      when { expression { return env.APP_VERSION } }
      steps {
        sh '''
          set -eux
          IMAGE_REPO='${IMAGE_REPO}'
          APP_VERSION='${APP_VERSION}'
          GIT_SHORT='${GIT_SHORT}'
          BASE_IMG="${IMAGE_REPO}/flask-api:${APP_VERSION}"
          COMMIT_TAG="${IMAGE_REPO}/flask-api:${APP_VERSION}-${GIT_SHORT}"
          docker tag "$BASE_IMG" "$COMMIT_TAG"
          docker image ls "$BASE_IMG" || true
          docker image ls "$COMMIT_TAG" || true
        '''
      }
    }

  }

  post {
    always {
      echo "Result: ${currentBuild.currentResult}"
      echo "Version: ${env.APP_VERSION ?: 'UNKNOWN'}"
    }
    success { echo 'Pipeline SUCCESS ✅' }
    failure { echo 'Pipeline FAILED ❌' }
  }
}

